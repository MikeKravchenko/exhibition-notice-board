{"version":3,"sources":["utils/api.js","components/ApplyModal.js","components/JobPost.js","components/NewJob.js","components/PostContainer.js","App.js","serviceWorker.js","index.js"],"names":["getJobs","a","fetch","response","ok","json","postJob","data","method","headers","body","JSON","stringify","updateJob","id","ApplyModal","props","open","onClose","onSubmit","useState","email","setEmail","location","setLocation","name","setName","cv","setCV","Dialog","aria-labelledby","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","margin","label","type","fullWidth","value","onChange","e","target","multiline","rows","DialogActions","Button","onClick","color","join","useStyles","makeStyles","theme","root","maxWidth","minWidth","chip","spacing","JobPost","contact","applicants","title","description","categories","handleApplySubmit","classes","applyOpen","setApplyOpen","Card","className","CardActionArea","CardContent","Typography","gutterBottom","variant","component","map","one","CardActions","style","flex","category","Chip","width","CATEGORIES","NewJobModal","setTitle","setContact","setDescription","setCategories","select","SelectProps","multiple","MenuItem","flexGrow","menuButton","marginRight","Alert","elevation","PostContainer","newPostOpen","setNewPostOpen","jobPosts","setJobPosts","successShow","setSuccessShow","successMessage","setSuccessMessage","failShow","setFailShow","useEffect","then","job","split","serialize","handleNewJobSubmit","newJob","index","findIndex","toUpdate","updatedJob","slice","Modals","Messages","Snackbar","autoHideDuration","severity","AppBar","position","Toolbar","Grid","container","direction","justify","alignItems","post","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c6261251.chunk.js","sourcesContent":["export const getJobs = async () => {\n  const response = await fetch('/jobs/');\n  if (response.ok) {\n    return await response.json();\n  }\n}\n\nexport const postJob = async data => {\n  const response = await fetch('/jobs/', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  });\n  if (response.ok) {\n    return await response.json();\n  } else {\n    return null;\n  }\n}\n\nexport const updateJob = async (id, data) => {\n  const response = await fetch(`/jobs/${id}/`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  });\n  if (response.ok) {\n    return await response.json();\n  } else {\n    return null;\n  }\n}","/**\n * Just a modal, let's make it as simple as possible,\n * one page app for real, no routes even\n */\nimport React, { useState } from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\n\nexport const ApplyModal = props => {\n  const {id, open, onClose, onSubmit} = props;\n\n  const [email, setEmail] = useState('');\n  const [location, setLocation] = useState('');\n  const [name, setName] = useState('');\n  const [cv, setCV] = useState('');\n\n  return (\n    <div>\n      <Dialog open={open} onClose={onClose} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">Apply to a job</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Add details about yourself\n          </DialogContentText>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"email\"\n            label=\"Email Address\"\n            type=\"email\"\n            fullWidth\n            value={email}\n            onChange={e => setEmail(e.target.value)}\n          />\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"name\"\n            label=\"Name\"\n            type=\"text\"\n            fullWidth\n            value={name}\n            onChange={e => setName(e.target.value)}\n          />\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"location\"\n            label=\"Location\"\n            type=\"text\"\n            fullWidth\n            value={location}\n            onChange={e => setLocation(e.target.value)}\n          />\n          <TextField\n            autoFocus\n            multiline\n            rows={4}\n            margin=\"dense\"\n            id=\"cv\"\n            label=\"CV\"\n            type=\"text\"\n            fullWidth\n            value={cv}\n            onChange={e => setCV(e.target.value)}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={() => {\n              onSubmit(id, [email, location, cv, name].join(' '));\n              onClose();\n            }} color=\"primary\">\n            Submit\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}","import React, { useState } from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\n\nimport Chip from '@material-ui/core/Chip';\n\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nimport { ApplyModal }  from './ApplyModal';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    maxWidth: 345,\n    minWidth: 345,\n    margin: '10px 10px 10px 10px'\n  },\n  chip: {\n    margin: theme.spacing(0.5),\n  },\n}));\n\n\nexport const JobPost = props => {\n  const {id, contact, applicants, title, description, categories, handleApplySubmit} = props;\n  const classes = useStyles();\n\n\n  const [applyOpen, setApplyOpen] = useState(false);\n  return (\n    <Card className={classes.root}>\n      <CardActionArea>\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            {title}\n          </Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n            {description}\n          </Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n            Contact: {contact}\n          </Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n            Already applied: {applicants && applicants.map(one => <p>{one}</p>)}\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n      <CardActions>\n        <Button style={{flex: 1}} variant=\"outlined\" color=\"primary\" onClick={() => setApplyOpen(true)}>\n          Apply\n        </Button>\n      </CardActions>\n      {\n        categories.map(category => <Chip className={classes.chip} label={category}/>)\n      }\n      <ApplyModal\n        id={id}\n        open={applyOpen}\n        onClose={() => setApplyOpen(false)}\n        onSubmit={handleApplySubmit}\n      />\n    </Card>\n  );\n}\n","/**\n * Just a modal, let's make it as simple as possible,\n * one page app for real, no routes even\n */\nimport React, { useState } from 'react';\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"300px\",\n  },\n}));\n\nconst CATEGORIES = [\n  'web',\n  'js',\n  'python',\n  'c#',\n  'other'\n];\n\nexport const NewJobModal = props => {\n  const { open, onClose, onSubmit } = props;\n  const classes = useStyles();\n\n  const [title, setTitle] = useState('');\n  const [contact, setContact] = useState('');\n  const [description, setDescription] = useState('');\n  const [categories, setCategories] = useState([]);\n\n  return (\n    <div>\n      <Dialog open={open} onClose={onClose} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">Add a new job</DialogTitle>\n        <DialogContent>\n          <TextField\n            classes={{ root: classes.root }}\n            select\n            name=\"categories\"\n            id=\"categories\"\n            variant=\"outlined\"\n            label=\"Categories\"\n            SelectProps={{\n              multiple: true,\n              value: categories,\n              onChange: e => setCategories(e.target.value)\n            }}\n          >\n            {\n              CATEGORIES.map(category => (\n                <MenuItem value={category}>{category}</MenuItem>\n              ))\n            }\n          </TextField>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"title\"\n            label=\"Title\"\n            type=\"text\"\n            fullWidth\n            value={title}\n            onChange={e => setTitle(e.target.value)}\n          />\n          <TextField\n            autoFocus\n            multiline\n            rows={4}\n            margin=\"dense\"\n            id=\"description\"\n            label=\"Description\"\n            type=\"text\"\n            fullWidth\n            value={description}\n            onChange={e => setDescription(e.target.value)}\n          />\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"contact\"\n            label=\"Contact email\"\n            type=\"email\"\n            fullWidth\n            value={contact}\n            onChange={e => setContact(e.target.value)}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={() => {\n            onSubmit(contact, title, description, categories);\n            onClose();\n          }}\n            color=\"primary\"\n          >\n            Submit\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}","import React, { useState, Fragment, useEffect } from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport Button from '@material-ui/core/Button';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport Grid from '@material-ui/core/Grid';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nimport { getJobs, postJob, updateJob } from '../utils/api';\n\nimport { JobPost } from './JobPost';\nimport { NewJobModal } from './NewJob';\n\n// TODO: move to constans/etc\nconst SUCCESS_APPLY = 'Congrats, you\\'ve applied succesfully';\nconst SUCCESS_NEW_JOB = 'Congrats, you\\'ve created a new job post';\nconst FAIL_COMMON_MSG = 'Something went wrong, try again';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 2,\n  },\n}));\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst serialize = job => {\n  return {\n    ...job,\n    categories: job.categories.split(':::'),\n    applicants: job.applicants.split(':::')\n  }\n}\n\n\nexport const PostContainer = () => {\n  const classes = useStyles();\n\n  const [newPostOpen, setNewPostOpen] = useState(false);\n\n  const [jobPosts, setJobPosts] = useState([]);\n\n  const [successShow, setSuccessShow] = useState(false);\n  const [successMessage, setSuccessMessage] = useState('');\n\n  const [failShow, setFailShow] = useState(false);\n\n  useEffect(() => {\n    getJobs().then(data => {\n      setJobPosts(data.map(job => serialize(job)))\n    });\n  }, []);\n\n  const handleNewJobSubmit = (contact, title, description, categories) => {\n    // TODO: add Loading...\n    postJob({\n      title: title,\n      description: description,\n      categories: categories.join(':::'),\n      contact: contact\n    }).then(data => {\n      if (!data) {\n        setFailShow(true);\n        return;\n      }\n      const newJob = {\n        id: data.id,\n        contact,\n        title,\n        description,\n        categories,\n        applicants: [],\n      };\n      setJobPosts([...jobPosts, newJob]);\n      setSuccessMessage(SUCCESS_NEW_JOB);\n    })\n  }\n\n  const handleApplySubmit = (id, data) => {\n    const index = jobPosts.findIndex(job => job.id === id);\n    const toUpdate = jobPosts[index];\n    const applicants = [...toUpdate.applicants, data];\n\n    const updatedJob = {\n      title: toUpdate.title,\n      description: toUpdate.description,\n      categories: toUpdate.categories.join(':::'),\n      contact: toUpdate.contact,\n      applicants: applicants.join(':::')\n    }\n    updateJob(\n      toUpdate.id,\n      updatedJob\n    ).then(data => {\n      if (!data) {\n        setFailShow(true);\n        return;\n      }\n      setJobPosts([\n        ...jobPosts.slice(0, index),\n        {\n          ...toUpdate,\n          applicants: applicants\n        },\n        ...jobPosts.slice(index + 1),\n      ]);\n      setSuccessMessage(SUCCESS_APPLY);\n      setSuccessShow(true);\n    })\n  }\n\n  const Modals = () => (\n    <Fragment>\n      <NewJobModal\n        open={newPostOpen}\n        onClose={() => setNewPostOpen(false)}\n        onSubmit={handleNewJobSubmit}\n      />\n    </Fragment>\n  )\n\n  const Messages = () => (\n    <Fragment>\n      <Snackbar open={successShow} autoHideDuration={6000} onClose={() => setSuccessShow(false)}>\n        <Alert onClose={() => setSuccessShow(false)} severity=\"success\">\n          {successMessage}\n        </Alert>\n      </Snackbar>\n\n      <Snackbar open={failShow} autoHideDuration={6000} onClose={() => setFailShow(false)}>\n        <Alert onClose={() => setFailShow(false)} severity=\"error\">\n          {FAIL_COMMON_MSG}\n        </Alert>\n      </Snackbar>\n    </Fragment>\n  )\n\n  return (\n    <Fragment>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            Job Posting Board\n          </Typography>\n          <Button color=\"inherit\" onClick={() => setNewPostOpen(true)}>Post New Job</Button>\n        </Toolbar>\n      </AppBar>\n\n      <Grid\n        container\n        direction=\"column\"\n        justify=\"space-between\"\n        alignItems=\"center\"\n      >\n      {\n        jobPosts.map(post =>\n          <JobPost\n            id={post.id}\n            title={post.title}\n            description={post.description}\n            categories={post.categories}\n            contact={post.contact}\n            applicants={post.applicants}\n            handleApplySubmit={handleApplySubmit}\n          />)\n      }\n      </Grid>\n\n      <Modals/>\n      <Messages/>\n    </Fragment>\n  );\n}","import React from 'react';\nimport './App.css';\n\nimport { PostContainer } from './components/PostContainer';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PostContainer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}